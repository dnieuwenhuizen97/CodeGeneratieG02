/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.MachineTransfer;
import io.swagger.model.RegisterRequest;
import io.swagger.model.Transaction;
import io.swagger.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-05-03T10:32:36.707Z[GMT]")
@Api(value = "users", description = "the users API")
public interface UsersApi {

    @ApiOperation(value = "Create user", nickname = "createUser", notes = "Creates user and adds it to the database.", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "Users","Employee operation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "User has been created."),
        @ApiResponse(code = 400, message = "Bad Request."),
        @ApiResponse(code = 401, message = "You are not authorized to create a user."),
        @ApiResponse(code = 403, message = "You do not have the right function to get all users, please contact your employer."),
        @ApiResponse(code = 404, message = "Something went wrong with your request"),
        @ApiResponse(code = 406, message = "Invalid input, double check the values of the input fields, please try again."),
        @ApiResponse(code = 429, message = "You have tried too many times to create a user(s), please wait a minute before you try again.") })
    @RequestMapping(value = "/users",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createUser(@ApiParam(value = "Created user object" ,required=true )  @Valid @RequestBody User body
);


    @ApiOperation(value = "Get all user register requests", nickname = "getAllRegisterRequests", notes = "gets al user sign up requesten, an employee is able to accept these requests en sign up the user.", response = RegisterRequest.class, responseContainer = "List", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "Employee operation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = RegisterRequest.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request."),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden."),
        @ApiResponse(code = 404, message = "Not found"),
        @ApiResponse(code = 406, message = "Invalid input"),
        @ApiResponse(code = 429, message = "Too Many Requests.") })
    @RequestMapping(value = "/users/requests",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<RegisterRequest>> getAllRegisterRequests();


    @ApiOperation(value = "Get all users", nickname = "getAllUsers", notes = "Gets all users from database, could be filtered by offset, limit, name, iban, user id and email", response = User.class, responseContainer = "List", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "Users","Employee operation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfuly found all users.", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request."),
        @ApiResponse(code = 401, message = "You are not authorized to get all users."),
        @ApiResponse(code = 403, message = "You do not have the right function to get all users, please contact your employer."),
        @ApiResponse(code = 404, message = "Something went wrong with your request."),
        @ApiResponse(code = 406, message = "Invalid input, double check the values of the input fields, please try again."),
        @ApiResponse(code = 429, message = "You have tried too many times to search for user(s), please wait a minute before you try again.") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> getAllUsers(@ApiParam(value = "The number of items to skip before starting to collect the result set") @Valid @RequestParam(value = "offset", required = false) Integer offset
,@ApiParam(value = "The numbers of items to return") @Valid @RequestParam(value = "limit", required = false) Integer limit
,@ApiParam(value = "The name the user should have") @Valid @RequestParam(value = "name", required = false) String name
,@ApiParam(value = "The iban the user should have") @Valid @RequestParam(value = "iban", required = false) String iban
,@ApiParam(value = "The id the user should have") @Valid @RequestParam(value = "userId", required = false) Integer userId
,@ApiParam(value = "The email the user should have") @Valid @RequestParam(value = "email", required = false) String email
);



    @ApiOperation(value = "withdraw/deposit money by user.", nickname = "machineTransfer", notes = "Withdraw or deposit money, depends on the type if the money will be added or removed from the account.", response = Transaction.class, authorizations = {
            @Authorization(value = "ApiKeyAuth")    }, tags={ "Machine","Customer operation", })
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "Withdraw/desposit succesfully processed.", response = Transaction.class),
            @ApiResponse(code = 400, message = "Bad Request."),
            @ApiResponse(code = 401, message = "You are not authorized to either withdraw or deposit money."),
            @ApiResponse(code = 403, message = "You do not have the right function to either withdraw or deposit money ."),
            @ApiResponse(code = 404, message = "Something went wrong with your request."),
            @ApiResponse(code = 406, message = "Invalid input, double check the values of the fields and try again."),
            @ApiResponse(code = 429, message = "You have tried too many times to withdraw or deposit money, please wait a minute before you try again.") })
    @RequestMapping(value = "/users/{userId}/machine",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<Transaction> machineTransfer(@ApiParam(value = "",required=true) @PathVariable("userId") Integer userId
            ,@ApiParam(value = ""  )  @Valid @RequestBody MachineTransfer body
    );

}
