/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Account;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-05-03T10:32:36.707Z[GMT]")
@Api(value = "accounts", description = "the accounts API")
public interface AccountsApi {

    @ApiOperation(value = "Get all accounts", nickname = "getAllAccounts", notes = "Get all account from database, could be filtered on offset, limit, user id, iban and account type", response = Account.class, responseContainer = "List", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "Accounts","Employee operation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "You have found a match based on your search criteria.", response = Account.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request."),
        @ApiResponse(code = 401, message = "You are not authorized to search for all accounts."),
        @ApiResponse(code = 403, message = "You do not hae the right function to get all accounts, please contact your employer."),
        @ApiResponse(code = 404, message = "No account(s) have been found."),
        @ApiResponse(code = 406, message = "Invalid input, double check the values of the input fields and try again."),
        @ApiResponse(code = 429, message = "You have tried too many times to search an account, please wait a minute before you try again.") })
    @RequestMapping(value = "/accounts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Account>> getAllAccounts(@ApiParam(value = "The number of items to skip before starting to collect the result set") @Valid @RequestParam(value = "offset", required = false) Integer offset
,@ApiParam(value = "The numbers of items to return") @Valid @RequestParam(value = "limit", required = false) Integer limit
,@ApiParam(value = "The user id of user that should own the account") @Valid @RequestParam(value = "userId", required = false) Integer userId
,@ApiParam(value = "The iban the account should have") @Valid @RequestParam(value = "iban", required = false) String iban
,@ApiParam(value = "The iban the account should have available accounts in the system", allowableValues = "current, savings") @Valid @RequestParam(value = "account_type", required = false) String accountType
);

}
